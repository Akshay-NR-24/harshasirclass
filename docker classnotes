1) Install Docker 
	docker install ubuntu 

2) Create a Docker hub account 
	Login to your hub account  in the host machine 
		docker login 

3) Pull and try a sample image 
	a. docker pull ubuntu 
	b. docker pull jenkins/jenkins:lts

4) List the existing local images 
	docker images 

5) Try to create a container out of pulled image
	a. docker run -it -d ubuntu /bin/bash 
	b. docker run -it -d --name myjenkins -p 8080:8080 -p 50000:50000 -v /var/jenkins_home jenkins/jenkins:lts

6) List containers 
	docker ps 
		(or)
	docker container ls 

7) To get Jenkins admin password 
	docker logs <container_id / container_name> 


Docker 
	Docker is one of the tools that used the idea of the isolated resources to 
	create a container that allows applications to be packaged with all the 
	dependencies installed and ran wherever we wanted.
	
	Docker can only run on Linux machines this means I cant install Docker directly on Windows or any other OS.
	If I want install Docker on windows then I need to run a Linux VM in windows on top that I need to run Docker.

Virtualization (VM)
	- VM is way of running virtual OS on top a host OS using a special software called Hypervisor.
	- VM directly shares the hardware of the host OS. 

					VM 					vs 			Containerisation 
	1. Virtualization at hardware level  		1. Virtualization at OS level 
	2. Heavyweight - consume more host 		2. Lightweight
	   resources 	
	3. VM uses hypervisor 				3. containerisation tool is used 
	4. limited performance - Boot up time        4. Native performance - usually boot 
		is more which is in minutes 			   fast in seconds.
	5. Consumes more storage 				5. Shares OS storage means only uses 
												   required storage.
	6. Supports all OS 							6. Supports on Linux

host machine 
	This is the machine in which docker is running 
	

Docker images 

	List docker images 
	    docker images 

	To download a docker images / How to use hub images 
	   docker pull <image_name>:<tag>
		ex: docker pull ubuntu:18.04
	   
	   Note: If we won't provide any tag then docker will consider 'latest' as default tag
	
	To upload an images to a registry 
	   docker push <username>/<repo_name>:<tag>

		ex: docker push harshajain/my_ubuntu:1.0

	To tag a image 
	   docker tag <old_image>:<tag> <new_image>:<tag>
		
	To delete a image/images 
	   docker rmi <image_name1>:<tag> <image_name2>:<tag>
		    (OR)
	   docker rmi <image_id1> <image_id2>
		
          To force delete a image 
		docker rmi -f <image_id>
	
       To list all image id's 
	  docker images -q 

       To delete all the images 
	  docker images -q | xargs docker rmi
		        (OR)
	  docker rmi $(docker images -q)

Docker container 
	A container is a set of isolated processes and resources. Linux achieves 
	this by using namespaces, which allows processes to access only resources 
	in that particular namespace, which allows having a process tree means set 
	of processes that is completely independent of the rest of the systems processes.
	
	Docker definition: A container is a standard unit of software that packages 
	up code and all its dependencies so the application runs quickly and reliably 
	from one computing environment to another.

       To list all running containers 
	   docker ps 
		(or)
	   docker container ls 
       
       To list all containers 
	   docker ps -a 
 		(or)
	   docker container ls -a

       To Delete a container 	
	   docker rm <container_name>
	          (or)
	   docker rm <container_ID>
		
       To delete a running container 
	   
	1. Gracefull delete 
	   a. Stop the running container 
		docker stop <container_name>
			(or)
		docker stop <container_ID>
           
	   b. Delete the stopped container 	
	        docker rm <container_name>
			(or)
		docker rm <container_ID>

	    Best way: docker rm $(docker stop <container_name / container_id>)	

			(OR)

        2. Delete by force 
	      docker rm -f <container_name/container_ID> 
           
       To stop all running container 
	    docker stop $(docker ps -q)
       
       To delete all stopped containers 
	    docker rm $(docker ps -q --filter "status=exited")	 	
       			(OR)
	    docker container prune 
		
To clean docker environment 
	docker system prune 
	
	Note: except volumes it will remove below resources 
		- all stopped containers
  		- all networks not used by at least one container
  		- all dangling images
  		- all dangling build cache       
       
	To remove unused volumes 
	  docker system prune --volumes

        To remove only unused images 
	  docker image prune 

	To remove only stopped container 
	  docker container prune 

	To remove only un-attached volumes 
	  docker volume prune 
	
	To remove only unused network 
	  docker network prune 

	Note: To avoid user confirmation use '-f'
		ex: docker container prune -f 
			      (or)
		    yes | docker container prune 	 

	To create a container 
		docker run -it -d --name <container_name> <image>:<tag> 
		
		DESC: -i: Interactive mode
		      -t: enable tty terminal
 		      -d: To create container in detached mode (Background)
		      --name: To provide a used defined name to container.		

Assignment: 
	docker cp 
		Copy from host machine to container
			docker cp <host_path> <container_name>:<container_path>

		Copy from container to host machine
			docker cp <container_name>:<container_path> <host_path> 

	docker pause
		docker pause <container_name> 	
			- Use to pause the running container and processes running in it 
		To unpause 
			docker unpause <container_name>	

	docker restart 
		To restart a container 
	
	docker top - To list the processes running inside a container 
			docker top <contaienr_ID>

	docker logs 
		docker logs <contaienr_ID>
			Will display all the stdout and std error of a container 
			
	docker inspect 
		used to get the complete information (metadata) on docker objects in JSON format output.

	docker info 
		information of docker daemon 


To Login to a container 
	1. Docker attach 
			It will attach to the main process/Command running inside a container 
				docker attach <contaienr_ID>

			Note: To safely exit after attach <ctrl> + qp

 
	2. Docker exec 
			using exec we can run any command inside a running container. 
				docker exec -it <container_id> <command>
			
			we can login to a running container by using exec 
				docker exec -it <container_id> /bin/bash 
		

Docker custom image / Dockerfile / Docker instructions 
	
	Dockerfile
		Dockerfile is used to create custom images by using any stock image or other image as base image.
		In Dockerfile we can write some set of instructions to update any image.
	
		To create image from Dockerfile
			docker build -t my_ubuntu .
	
	FROM ubuntu
		FROM is the first instruction in the every Dockerfile
		FROM is used to specify the base image on top which all the other 
			instruction will run in the same Dockerfile.
			
		FROM <image_name>:<tag>
		
	RUN 
		Normal shell command or the commands supported by the base image are executed using this instruction.
		we can have n number of RUN in a single Dockerfile.
		
		Normal command format 
			RUN <command>
			
		exec format 
			RUN ['<command>','<param1>','<param2>']	
			RUN ['apt','update']	
			RUN ['apt','install','-y','git']	
			RUN ['ls','-lrt']	 

	COPY and ADD 
		Both copy and add instruction is used to copy files and directories from 
		host machine build location to the image and the container created from it.
	
		ADD supports extra source formats 
	  	  - If the source is a compressed file then ADD will automatically uncompress it 
	    		in the destination.
	      - If the source is a downloadable link then ADD will automatically download the 
	        file in the destination.

		COPY <source_path_from_build_context> <destination_inside_image>	  
		ADD <source_path_from_build_context> <destination_inside_image>	  

Assignment: 
	1. Complete demo COPY & ADD instruction difference.
	2. Create ubuntu custom image with all the required package installed.
		packages: git, curl, tomcat, jq
	3. Create an image from a container.
		a. create a container 
		b. login to above container and create some file/directories 
		c. Create an image from above container.
		d. create second container from above image 
		e. The file created in the first container should exists in this container.


	ENV 
	   This instruction is used to set the environment variable inside the container. 
	   Using this instruction we can create env variables at build time which means in the docker images.
		ex:
			
		   1. For individual variable	 
		      ENV <variable_name> <value>
			     (OR)
		      ENV <variable_name>=<value>

		   2. For multiple variable
	 	      ENV <variable_name1>=<value1> <variable_name2>=<value2> .....

	   To create environment variables at run time (means in containers)
		1. With the docker run command 
			docker run -e <variable_name>=<value> -e <variable_name>=<value>
		2. With a list of variables in a file (.env file)
			docker run --env-file <file_path> ...		
		
	ARG 
	   using this instruction we can pass parameters to Dockerfile as user inputs.
		
		ex: ARG <arg_variable_name>=<value>

		Note: <value> acts as default value to the arg_variable means if user does not set 
		      the arg value at build time this value will be used.

		To pass the value at build time 
			docker build --build-arg <arg_variable_name>=<user_value> 

	CMD vs ENTRYPOINT 
		- Both CMD and ENTRYPOINT are used to define the default execution command of the container (the command 
	   	  which will be executed in the container as main process).
		- If we use multiple CMD or ENTRYPOINT in the same Dockerfile only the last one will 
		  be considered.
		- If we use both CMD and ENTRYPOINT in the same Dockerfile, then ENTRYPOINT gets the 
	          highest priority and the command defined using CMD will be as parameters to ENTRYPOINT.

		Difference 
		   - CMD can be completely overridden at the runtime (with docker run at the end we can provide 
	   	     the command to override the CMD). 
		   - ENTRYPOINT can't be overridden at the runtime but the command passed at the runtime 
		     will become parameters to ENTRYPOINT command defined in Dockerfile.
		
		Syntax: we can define command in 2 ways 
			1. shell format 
		   	   CMD "ls -lrt"
		
			2. EXEC format 
			   - Always first element is command.
			   - Except first element all the other elements are parameters to command. 

    			   CMD ["ls","-lrt"]  


Assignment: Q. How to override the ENTRYPOINT from the runtime?
		Yes, (Find out how?)
		  

	WORKDIR 
		This is used to set the working directory for all the instructions that follows it.
		such as RUN, CMD, ENTRYPOINT, COPY, ADD .... 	
		   
		ex: WORKDIR <path_in_container>
	   
		

IQ: What is the difference b/w CMD and ENTRYPOINT ? 
    What is the difference b/w COPY and ADD ?
    What is the difference b/w ENV and ARG ?	
    What is the difference b/w Expose and Publish ?	

	EXPOSE 
	     Syntax: EXPOSE <port_number>
	     - Used to expose a port to the docker network so that all the other containers in 
	       the same docker network can access it.
	     - Exposes the port with in the host machine.	
		
	MAINTAINER
	     used to provide the author name metadata.


Publish 
			
	docker run -it -d --rm --name -p 8080:8090

	
